# Backend CI Placeholder
name: Backend CI & Staging CD

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  GAR_REGION: us-central1
  GAR_PROJECT_ID: drfirst-business-case-gen
  GAR_REPOSITORY: drfirst-backend
  IMAGE_NAME: drfirst-backend

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    # Add permissions for Workload Identity Federation
    permissions:
      contents: read
      id-token: write

    outputs:
      image_base: ${{ steps.image-tags.outputs.image_base }}
      image_sha_tag: ${{ steps.image-tags.outputs.image_sha_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Lint Code
        run: |
          flake8 --config=backend/.flake8 backend/app backend/tests

      - name: Run Tests
        working-directory: ./backend
        env:
          PYTHONPATH: .
          SECRET_KEY: test-secret-key-for-ci
          GOOGLE_CLOUD_PROJECT_ID: test-project
          FIREBASE_PROJECT_ID: test-project
          VERTEX_AI_LOCATION: us-central1
          VERTEX_AI_MODEL_NAME: gemini-2.0-flash-lite
          LOG_LEVEL: INFO
          DEBUG: false
          ENVIRONMENT: test
        run: |
          python -m pytest tests/ --verbose --cov=app --cov-report=term-missing

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64
          push: false
          tags: |
            ${{ env.IMAGE_NAME }}:ci-${{ github.sha }}
            ${{ env.IMAGE_NAME }}:ci-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # GCP Authentication and Image Push (only on push to main/develop)
      - name: Authenticate to Google Cloud
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Set up Cloud SDK
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        run: |-
          gcloud auth configure-docker ${{ env.GAR_REGION }}-docker.pkg.dev

      - name: Generate image tags
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        id: image-tags
        run: |
          # Base image path
          IMAGE_BASE="${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}"
          
          # Always tag with commit SHA
          TAGS="${IMAGE_BASE}:${{ github.sha }}"
          
          # Add branch-specific tags
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAGS="${TAGS}
          ${IMAGE_BASE}:latest
          ${IMAGE_BASE}:main"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            TAGS="${TAGS}
          ${IMAGE_BASE}:develop"
          fi
          
          # Set output for next step
          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo "$TAGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Also set base path and SHA tag for easy reference
          echo "image_base=${IMAGE_BASE}" >> $GITHUB_OUTPUT
          echo "image_sha_tag=${IMAGE_BASE}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build and Push Docker image to Artifact Registry
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.image-tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.title=DrFirst Backend
            org.opencontainers.image.description=Backend API for DrFirst Business Case Generator
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      - name: Output image details
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        run: |
          echo "üöÄ Successfully pushed Docker image to Google Artifact Registry!"
          echo ""
          echo "üìã Image Details:"
          echo "Repository: ${{ steps.image-tags.outputs.image_base }}"
          echo "Tags pushed:"
          echo "${{ steps.image-tags.outputs.tags }}" | sed 's/^/  - /'
          echo ""
          echo "üîó View in Google Cloud Console:"
          echo "https://console.cloud.google.com/artifacts/docker/${{ env.GAR_PROJECT_ID }}/${{ env.GAR_REGION }}/${{ env.GAR_REPOSITORY }}?project=${{ env.GAR_PROJECT_ID }}"

      - name: Security scan with Trivy
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image-tags.outputs.image_base }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Optional: Job to verify the image can be pulled (integration test)
  verify-image:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |-
          gcloud auth configure-docker ${{ env.GAR_REGION }}-docker.pkg.dev

      - name: Verify image can be pulled
        run: |
          IMAGE_PATH="${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "üîç Attempting to pull image: ${IMAGE_PATH}"
          
          if docker pull "${IMAGE_PATH}"; then
            echo "‚úÖ Successfully pulled image from Artifact Registry"
            
            # Optional: Run basic health check
            echo "üè• Running basic container health check..."
            CONTAINER_ID=$(docker run -d -p 8000:8000 "${IMAGE_PATH}")
            sleep 10
            
            # Check if container is still running
            if docker ps | grep -q "${CONTAINER_ID}"; then
              echo "‚úÖ Container started successfully"
              docker stop "${CONTAINER_ID}"
            else
              echo "‚ùå Container failed to start"
              docker logs "${CONTAINER_ID}"
              exit 1
            fi
          else
            echo "‚ùå Failed to pull image from Artifact Registry"
            exit 1
          fi

  # Continuous Deployment job for staging environment
  deploy-staging:
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    needs: [build-and-test, verify-image]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run - Staging
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ secrets.CLOUD_RUN_SERVICE_DEV }}
          project_id: ${{ env.GAR_PROJECT_ID }}
          region: ${{ secrets.GCP_REGION }}
          image: ${{ needs.build-and-test.outputs.image_sha_tag }}
          env_vars: |
            ENVIRONMENT=development
            GOOGLE_CLOUD_PROJECT_ID=${{ env.GAR_PROJECT_ID }}
            FIREBASE_PROJECT_ID=${{ env.GAR_PROJECT_ID }}
            VERTEX_AI_LOCATION=${{ secrets.GCP_REGION }}
            VERTEX_AI_MODEL_NAME=gemini-2.0-flash-lite
            LOG_LEVEL=INFO
            DEBUG=false
            BACKEND_CORS_ORIGINS=${{ secrets.DEV_BACKEND_CORS_ORIGINS }}
          secrets: |
            SECRET_KEY=projects/${{ env.GAR_PROJECT_ID }}/secrets/app-secret-key/versions/latest
            FIREBASE_API_KEY=projects/${{ env.GAR_PROJECT_ID }}/secrets/firebase-api-key/versions/latest
          flags: "--port=8000 --memory=1Gi --cpu=1 --allow-unauthenticated"

      - name: Verify deployment success
        run: |
          echo "üéâ Deployment to Cloud Run staging completed!"
          echo ""
          echo "üåê Service Details:"
          echo "Service: ${{ secrets.CLOUD_RUN_SERVICE_DEV }}"
          echo "Region: ${{ secrets.GCP_REGION }}"
          echo "Project: ${{ env.GAR_PROJECT_ID }}"
          echo "Image: ${{ needs.build-and-test.outputs.image_sha_tag }}"
          echo ""
          echo "üîó View in Google Cloud Console:"
          echo "https://console.cloud.google.com/run/detail/${{ secrets.GCP_REGION }}/${{ secrets.CLOUD_RUN_SERVICE_DEV }}/metrics?project=${{ env.GAR_PROJECT_ID }}"

      - name: Health check deployed service
        run: |
          echo "üè• Performing health check on deployed service..."
          
          # Get the service URL
          SERVICE_URL=$(gcloud run services describe ${{ secrets.CLOUD_RUN_SERVICE_DEV }} \
            --region=${{ secrets.GCP_REGION }} \
            --format='value(status.url)')
          
          echo "Service URL: ${SERVICE_URL}"
          
          # Wait a moment for the service to be ready
          sleep 30
          
          # Test the health endpoint
          if curl -f -s "${SERVICE_URL}/" > /dev/null; then
            echo "‚úÖ Health check passed - service is responding"
          else
            echo "‚ùå Health check failed - service may not be ready"
            echo "Trying again in 30 seconds..."
            sleep 30
            if curl -f -s "${SERVICE_URL}/" > /dev/null; then
              echo "‚úÖ Health check passed on retry - service is responding"
            else
              echo "‚ùå Health check failed on retry"
              exit 1
            fi
          fi 