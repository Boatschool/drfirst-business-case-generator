#!/usr/bin/env python3
"""
Test script for ArchitectAgent implementation and PRD approval workflow.
"""
import asyncio
import os
import sys

# Add the current directory to the path so we can import app modules
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))


async def test_architect_agent():
    """Test the ArchitectAgent system design generation functionality."""
    print("🧪 Testing ArchitectAgent...")

    try:
        from app.agents.architect_agent import ArchitectAgent
        from app.agents.orchestrator_agent import OrchestratorAgent, BusinessCaseStatus

        # Initialize agents
        architect_agent = ArchitectAgent()
        orchestrator_agent = OrchestratorAgent()

        print(f"✅ Agents initialized successfully")
        print(f"   - ArchitectAgent status: {architect_agent.get_status()}")
        print(f"   - OrchestratorAgent status: {orchestrator_agent.get_status()}")

        # Test data
        sample_case_title = "Healthcare Patient Portal Enhancement"
        sample_prd_content = """
# PRD: Healthcare Patient Portal Enhancement

## 1. Executive Summary
Enhance the existing patient portal to improve user experience and provide better healthcare management tools.

## 2. Problem Statement
Current patient portal lacks intuitive navigation and essential features like appointment scheduling and prescription management.

## 3. Goals & Objectives
- Improve patient engagement by 40%
- Reduce support calls by 25%
- Implement appointment scheduling
- Add prescription management

## 4. User Stories
- As a patient, I want to easily schedule appointments online
- As a patient, I want to view my prescription history
- As a patient, I want to communicate with my healthcare provider

## 5. Success Metrics
- User satisfaction score > 4.5/5
- Monthly active users increase by 30%
- Appointment booking conversion rate > 60%

## 6. Timeline & Resources
- 6-month development timeline
- 3 developers, 1 designer, 1 PM
- Budget: $150,000

## 7. Technical Requirements
- HIPAA compliance required
- Integration with existing EHR system
- Mobile-responsive design
- 99.9% uptime requirement

## 8. Risks & Mitigation
- Integration complexity: Prototype early
- HIPAA compliance: External audit
- User adoption: Beta testing program
"""

        print("\n🎯 Testing ArchitectAgent.generate_system_design()...")

        # Test system design generation
        design_result = await architect_agent.generate_system_design(
            prd_content=sample_prd_content, case_title=sample_case_title
        )

        if design_result.get("status") == "success":
            system_design = design_result.get("system_design_draft", {})
            content = system_design.get("content_markdown", "")

            print(f"✅ System design generated successfully!")
            print(f"   - Status: {design_result['status']}")
            print(f"   - Message: {design_result['message']}")
            print(f"   - Content length: {len(content)} characters")
            print(f"   - Generated by: {system_design.get('generated_by')}")
            print(f"   - Version: {system_design.get('version')}")

            # Show a preview of the content
            if content:
                print(f"\n📄 System Design Preview (first 500 chars):")
                print("─" * 60)
                print(content[:500] + "..." if len(content) > 500 else content)
                print("─" * 60)

            return True
        else:
            print(f"❌ System design generation failed:")
            print(f"   - Status: {design_result['status']}")
            print(f"   - Message: {design_result.get('message', 'No message')}")
            return False

    except Exception as e:
        print(f"❌ Test failed with exception: {str(e)}")
        import traceback

        traceback.print_exc()
        return False


async def test_orchestrator_prd_approval():
    """Test the OrchestratorAgent.handle_prd_approval() method (without Firestore)."""
    print("\n🧪 Testing OrchestratorAgent PRD approval handling...")

    try:
        from app.agents.orchestrator_agent import OrchestratorAgent

        orchestrator = OrchestratorAgent()

        # This test is limited since it requires Firestore, but we can test the method exists
        print(
            f"✅ OrchestratorAgent.handle_prd_approval method exists: {hasattr(orchestrator, 'handle_prd_approval')}"
        )

        # Test the method signature (without calling it since we don't have Firestore set up)
        import inspect

        signature = inspect.signature(orchestrator.handle_prd_approval)
        print(f"✅ Method signature: handle_prd_approval{signature}")

        return True

    except Exception as e:
        print(f"❌ Test failed with exception: {str(e)}")
        import traceback

        traceback.print_exc()
        return False


async def main():
    """Run all tests."""
    print("🚀 Starting ArchitectAgent Integration Tests")
    print("=" * 60)

    # Test 1: ArchitectAgent functionality
    test1_success = await test_architect_agent()

    # Test 2: OrchestratorAgent integration
    test2_success = await test_orchestrator_prd_approval()

    print("\n" + "=" * 60)
    print("📊 Test Results Summary:")
    print(f"   - ArchitectAgent test: {'✅ PASS' if test1_success else '❌ FAIL'}")
    print(f"   - OrchestratorAgent test: {'✅ PASS' if test2_success else '❌ FAIL'}")

    all_tests_passed = test1_success and test2_success

    if all_tests_passed:
        print("\n🎉 All tests passed! ArchitectAgent implementation is ready.")
        print("\nNext steps:")
        print("1. Test PRD approval via API endpoint")
        print("2. Verify system design appears in frontend")
        print("3. Check Firestore document updates")
    else:
        print("\n⚠️  Some tests failed. Please check the implementation.")

    return all_tests_passed


if __name__ == "__main__":
    asyncio.run(main())
